=head1 NAME

$_PROGRAM.conf 

=head1 SYNOPSIS

$_PROGRAM.conf 

The default file /etc/$_PROGRAM/$_PROGRAM.conf You can override 
the default file with the FIDORC ENV variable or the -f /path/file 
command line option. 

=head1 DESCRIPTION

$_PROGRAM.conf is the configuration file for $_PROGRAM. The file consists
of two parts, GLOBAL settings and FILE settings. GLOBAL settings are best 
defined at the top of the file in key = value format. FILE settings are 
distinguished with a filename followed by brackets {}. Key = value pairs 
inside the brackets apply only to that file. If a value isn't set at the 
FILE level, then $_PROGRAM applies a GLOBAL setting. Here's an example:

  # GLOBAL SETTINGS
  log   = syslog
  pid   = /var/run/fido.pid

  # FILE SETTINGS
  /var/log/messages {
    log      = value
    rules    = regex or filename or exceeds or modified or count 
    excludes = regex (filenames that match will be ignored)
    action   = /path/to/script <args>
    clear    = /path/to/script <args>
    interval = Ns or Nm or Nh or Nd where N is a number
  }

Here is a list of available settings:

=head2 log

This is a GLOBAL and FILE level directive. If it's set at the file level, then
fido will use that mechanism for logging activity for the file/directory it is
monitoring. If log isn't set at the file level, then it uses the global mechanism
for logging. The choices are 'syslog' or a path to a file:

  log = syslog
  log = /var/log/fido.log
 
=head2 pid

This is a GLOBAL directive which cannot be set inside a file block. Use this setting 
to assign a file to hold $_PROGRAM's process ID (pid). Default: /var/run/$_PROGRAM.pid 

  pid = /home/jeff/var/$_PROGRAM.pid
  
=head2 daemon

This is a GLOBAL directive which cannot be set inside a file block. By default, $_PROGRAM 
will run in the background as a daemon. It is often helpful to run this program in the
foreground with verbosity in order to troubleshoot/test the configuration. Both
directives are available at the commandline: fido -v --daemon=false 

  daemon = true
 
=head2 rulesdir

This is a GLOBAL directive which sets the directory in which we can store our rules
files. So if a file block sets 'rules = jboss.conf' then fido will look for that file
in '$rulesdir/jboss.conf' The default rulesdir is /etc/$_PROGRAM/rules.

  rulesdir = /usr/local/etc/$_PROGRAM/rules

=head2 rules

This is a FILES level directive that tells $_PROGRAM what to do inside the block.
where to find a file of pattern
matches. It can take one of three different values, a regex, the 'modified' directive
or a file name. If the value is a regex, then $_PROGRAM will use that rule 
as it parses the file it's watching. If the value is the 'modified' directive, then 
it will trigger an alert each time the file is modified. If the value is a file name, 
then it will read $rulesdir/$rules for all it's patterns. The benefit of using a file 
is that you can set many patterns, one on each line. $_PROGRAM will try each line as 
it looks for a match.

  # Instructs $_PROGRAM to trigger an alert if any file's modification 
  # time changes inside the /export directory
  /exports {
    rules = modified
  } 

  # Instructs $_PROGRAM to trigger an alert if it matches the pattern 
  # .*OutOfMemory.* inside the file /var/log/jboss/catalina.out
  /var/log/jboss/catalina.out { 
    rules = .*OutOfMemory.*
  }

  # Instructs $_PROGRAM to trigger an alert if a file inside /exports
  # is older than 7 days
  /exports {
    rules = exceeds 7d
  } 

  # Instructs $_PROGRAM to trigger an alert if it matches a pattern inside
  # $rulesdir/haha.conf inside /var/log/jboss/catalina.out
  /var/log/jboss/catalina.out {
    rules = haha.conf 
  }

  # Instructs $_PROGRAM to trigger an alert if the file count inside the
  # directory /usr/share/puppet-dashboard/spool is greater than 50
  /usr/share/puppet-dashboard/spool { 
    rules = count > 50
  }

rules DETAILS

'modified' instructs fido to trigger an action if the modified date of the file(s) it's
monitoring have changed. 

'pattern' such as '.*OutOfMemory.*' in the example above is a regular expression that 
$_PROGRAM attemps to match inside a file.  Beginning with version 1.1.4, you can use 
parentheses to capture text and assign to variables $1, $2, etc.  This is useful if 
you'd like to send matched text to your program, for example:

  # Capture the IP address and assign it to $1 then use $1 
  # as a program parameter.
  /var/log/httpd/joedog-access_log {
    rules  = ^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*GoogleBot
    action = /home/jeff/bin/googler $1
  }

'file' works similar to 'pattern' although it points to a file of regular expressions. 
The directive takes a filename like 'haha.conf' $_PROGRAM will look for 'haha.conf' 
inside the $rulesdir which is set at the global level. 

'exceeds' is an aging  directive. This instructs $_PROGRAM to look for files inside
a directory whose age is older than the value. 'exceeds 7 days' will fire an alert if the
file is 8 days old. Acceptable modifiers are: 'seconds', 'minutes', 'hours', 'days'

'count' is a directory directive. This instructs $_PROGRAM to count the files inside
a directory and fire an alert if the criteria is met. 'rules = count > 50' will fire
an alert there are 51 files inside the directory.

=head2 action

This is a FILE level directive that tells $_PROGRAM what to do in the event 
of a pattern match. Generally, you'll want to specify a script although you 
can specify a program with parameters:

  action = echo "action alert!!!!" | /usr/sbin/sendmail -v jeff@joedog.org
  action = /home/jeff/bin/haha
  action = /usr/local/bin/myscript $1 $2

=head2 throttle

This is a FILES level directive which tells $_PROGRAM to delay place a delay between
actions. This is useful to avoid flooding inboxes with emails or node managers with SMTP
traps. The trottle format is 'throttle = N denomination' where 'N' is a number and 
'denomination' is either 'seconds', 'minutes', 'hours' or 'days'. 

  throttle = 15 minutes
  throttle = 1 hour
  throttle = 1 day(s) 

=head2 exclude

This is a FILES level directive that only works when you monitor directories with the
exceeds directive. The format is 'exclude =  [pattern]' where pattern is a regular 
expression. Consider this:

/export {
  rule    = exceeds 7 days
  exclude = ^\.|CVS|Makefile
}

Given this file block, $_PROGRAM will execute an action if any file inside the directory
/export is older than 7 days but does NOT start with '.' nor is it named CVS or Makefile.

 
=head2 recurse

This is a FILE level directive that that only works when you monitor directories. If
recurse is true, then fido will search all subdirectories below the path. If recurse is
false then fido will only examine files inside the top-level directory.

/export {
  rule    = exceeds 1 month
  recurse = true 
}

=head2 interval 

This is a FILE level directive which tells $_PROGRAM how long to pause between 
iterations. 'interval = 5m' pauses for five minutes between checks. Acceptable 
modifiers are 's' (seconds), 'm' (minutes), 'h' (hours) and 'd' (days)

=head2 capture

This is a FILES level directive that tells $_PROGRAM to log the output from the
action directive mentioned above. If you're running sendmail -v, then it will log
all that verbose output to its selected logging method. Good for debugging it takes
one of two values, 'true' or 'false' - if false, it won't log output. The default 
is false

  capture = true
  capture = false

=head2 user 

This is a GLOBAL setting in which we specify which user ID $_PROGRAM will run under. 
You'll need to select a user that has read permissions to the file it's monitoring 
and write permissions to the directory in which it's logging. It is preferred that you
select the least privileged user possible.

  user = jboss

=head2 group

This is a GLOBAL setting in which we specify with group ID $_PROGRAM will run under.
Like 'user' we recommend you select the least privileged group possible

  group = jboss

=head1 SAMPLE FILE

  #
  # Global values 
  #
  log      = syslog
  pid      = /var/run/fido.pid
  daemon   = true
  rulesdir = /etc/fido/rules
  user     = root
  group    = daemon

  /var/log/httpd/access_log {
    rules  = .*siege-.*tar.gz.*
    action = /usr/bin/tally
    log    = /var/log/fido.log
  }

  /var/log/maillog {
   rules  = maillog.conf
   action = /usr/bin/react
  }

  /var/log/haha.log {
    rules   = ^haha.*
    action  = echo "alert!!!!" | /usr/sbin/sendmail -v jeff@joedog.org
    capture = true
  }

